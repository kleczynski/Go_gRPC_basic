// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: rectask.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecTaskClient is the client API for RecTask service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecTaskClient interface {
	AllPath(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Auth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TokenRender, error)
}

type recTaskClient struct {
	cc grpc.ClientConnInterface
}

func NewRecTaskClient(cc grpc.ClientConnInterface) RecTaskClient {
	return &recTaskClient{cc}
}

func (c *recTaskClient) AllPath(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/main.RecTask/AllPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recTaskClient) Auth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TokenRender, error) {
	out := new(TokenRender)
	err := c.cc.Invoke(ctx, "/main.RecTask/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecTaskServer is the server API for RecTask service.
// All implementations must embed UnimplementedRecTaskServer
// for forward compatibility
type RecTaskServer interface {
	AllPath(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Auth(context.Context, *emptypb.Empty) (*TokenRender, error)
	mustEmbedUnimplementedRecTaskServer()
}

// UnimplementedRecTaskServer must be embedded to have forward compatible implementations.
type UnimplementedRecTaskServer struct {
}

func (UnimplementedRecTaskServer) AllPath(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllPath not implemented")
}
func (UnimplementedRecTaskServer) Auth(context.Context, *emptypb.Empty) (*TokenRender, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedRecTaskServer) mustEmbedUnimplementedRecTaskServer() {}

// UnsafeRecTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecTaskServer will
// result in compilation errors.
type UnsafeRecTaskServer interface {
	mustEmbedUnimplementedRecTaskServer()
}

func RegisterRecTaskServer(s grpc.ServiceRegistrar, srv RecTaskServer) {
	s.RegisterService(&RecTask_ServiceDesc, srv)
}

func _RecTask_AllPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecTaskServer).AllPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.RecTask/AllPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecTaskServer).AllPath(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecTask_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecTaskServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.RecTask/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecTaskServer).Auth(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RecTask_ServiceDesc is the grpc.ServiceDesc for RecTask service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecTask_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.RecTask",
	HandlerType: (*RecTaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllPath",
			Handler:    _RecTask_AllPath_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _RecTask_Auth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rectask.proto",
}
